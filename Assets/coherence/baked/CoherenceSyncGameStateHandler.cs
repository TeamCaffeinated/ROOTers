// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using UnityEngine;
	using Coherence.Toolkit;
	using Coherence.Toolkit.Bindings;
	using Coherence.Entity;
	using Coherence.ProtocolDef;
	using Coherence.Brook;
	using Coherence.Toolkit.Bindings.ValueBindings;
	using Coherence.Toolkit.Bindings.TransformBindings;
	using Coherence.Connection;
	using Coherence.Log;
	using Logger = Coherence.Log.Logger;
	using UnityEngine.Scripting;

	public class Binding_ec2ebf1be19db254da1ba90b22940b35_f052f0f6_2671_4f10_a1f6_4aba6cf714ec : UIntBinding
	{
		private GameStateComponent CastedUnityComponent;		

		protected override void OnBindingCloned()
		{
			CastedUnityComponent = (GameStateComponent)UnityComponent;
		}
		public override string CoherenceComponentName => "GameStateHandler_GameStateComponent_2155129602599516921";

		public override uint FieldMask => 0b00000000000000000000000000000001;

		public override uint Value
		{
			get => (uint)(System.UInt32)(CastedUnityComponent.currentState);
			set => CastedUnityComponent.currentState = (System.UInt32)(value);
		}

		protected override uint ReadComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (GameStateHandler_GameStateComponent_2155129602599516921)coherenceComponent;
			return update.currentState;
		}
		
		public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (GameStateHandler_GameStateComponent_2155129602599516921)coherenceComponent;
			update.currentState = Value;
			return update;
		}

		public override ICoherenceComponentData CreateComponentData()
		{
			return new GameStateHandler_GameStateComponent_2155129602599516921();
		}
	}

	public class Binding_ec2ebf1be19db254da1ba90b22940b35_4a762c79_f731_4c23_991c_282fc95d1c5a : FloatBinding
	{
		private GameStateComponent CastedUnityComponent;		

		protected override void OnBindingCloned()
		{
			CastedUnityComponent = (GameStateComponent)UnityComponent;
		}
		public override string CoherenceComponentName => "GameStateHandler_GameStateComponent_2155129602599516921";

		public override uint FieldMask => 0b00000000000000000000000000000010;

		public override float Value
		{
			get => (float)(System.Single)(CastedUnityComponent.waitingTimeRemaining);
			set => CastedUnityComponent.waitingTimeRemaining = (System.Single)(value);
		}

		protected override float ReadComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (GameStateHandler_GameStateComponent_2155129602599516921)coherenceComponent;
			return update.waitingTimeRemaining;
		}
		
		public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (GameStateHandler_GameStateComponent_2155129602599516921)coherenceComponent;
			update.waitingTimeRemaining = Value;
			return update;
		}

		public override ICoherenceComponentData CreateComponentData()
		{
			return new GameStateHandler_GameStateComponent_2155129602599516921();
		}
	}

	public class Binding_ec2ebf1be19db254da1ba90b22940b35_4a35e0c8_150d_457e_a58e_fcd0044ff5aa : ByteArrayBinding
	{
		private GameStateComponent CastedUnityComponent;		

		protected override void OnBindingCloned()
		{
			CastedUnityComponent = (GameStateComponent)UnityComponent;
		}
		public override string CoherenceComponentName => "GameStateHandler_GameStateComponent_2155129602599516921";

		public override uint FieldMask => 0b00000000000000000000000000000100;

		public override byte[] Value
		{
			get => (byte[])(System.Byte[])(CastedUnityComponent.dummyArray);
			set => CastedUnityComponent.dummyArray = (System.Byte[])(value);
		}

		protected override byte[] ReadComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (GameStateHandler_GameStateComponent_2155129602599516921)coherenceComponent;
			return update.dummyArray;
		}
		
		public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (GameStateHandler_GameStateComponent_2155129602599516921)coherenceComponent;
			update.dummyArray = Value;
			return update;
		}

		public override ICoherenceComponentData CreateComponentData()
		{
			return new GameStateHandler_GameStateComponent_2155129602599516921();
		}
	}

	public class Binding_ec2ebf1be19db254da1ba90b22940b35_00051df1_bad9_46f6_a698_08b9741ebbd8 : ReferenceBinding
	{
		private GraphGeneratorScript CastedUnityComponent;		

		protected override void OnBindingCloned()
		{
			CastedUnityComponent = (GraphGeneratorScript)UnityComponent;
		}
		public override string CoherenceComponentName => "GameStateHandler_GraphGeneratorScript_2155129602599516902";

		public override uint FieldMask => 0b00000000000000000000000000000001;

		public override SerializeEntityID Value
		{
			get => (SerializeEntityID)coherenceSync.MonoBridge.UnityObjectToEntityId(CastedUnityComponent.layersAsGameObject);
			set => CastedUnityComponent.layersAsGameObject = coherenceSync.MonoBridge.EntityIdToGameObject(value);
		}

		protected override SerializeEntityID ReadComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (GameStateHandler_GraphGeneratorScript_2155129602599516902)coherenceComponent;
			return update.layersAsGameObject;
		}
		
		public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (GameStateHandler_GraphGeneratorScript_2155129602599516902)coherenceComponent;
			update.layersAsGameObject = Value;
			return update;
		}

		public override ICoherenceComponentData CreateComponentData()
		{
			return new GameStateHandler_GraphGeneratorScript_2155129602599516902();
		}
	}


	[Preserve]
	[AddComponentMenu("coherence/Baked/Baked 'GameStateHandler' (auto assigned)")]
	[RequireComponent(typeof(CoherenceSync))]
	public class CoherenceSyncGameStateHandler : CoherenceSyncBaked
	{
		private CoherenceSync coherenceSync;
		private Logger logger;

		// Cached targets for commands

		private IClient client;
		private CoherenceMonoBridge monoBridge => coherenceSync.MonoBridge;

		protected void Awake()
		{
			coherenceSync = GetComponent<CoherenceSync>();
			coherenceSync.usingReflection = false;

			logger = coherenceSync.logger.With<CoherenceSyncGameStateHandler>();
			if (coherenceSync.TryGetBindingByGuid("f052f0f6-2671-4f10-a1f6-4aba6cf714ec", "currentState", out Binding InternalGameStateHandler_GameStateComponent_2155129602599516921_GameStateHandler_GameStateComponent_2155129602599516921_currentState))
			{
				var clone = new Binding_ec2ebf1be19db254da1ba90b22940b35_f052f0f6_2671_4f10_a1f6_4aba6cf714ec();
				InternalGameStateHandler_GameStateComponent_2155129602599516921_GameStateHandler_GameStateComponent_2155129602599516921_currentState.CloneTo(clone);
				coherenceSync.Bindings[coherenceSync.Bindings.IndexOf(InternalGameStateHandler_GameStateComponent_2155129602599516921_GameStateHandler_GameStateComponent_2155129602599516921_currentState)] = clone;
			}
			else
			{
				logger.Error("Couldn't find binding (GameStateComponent).currentState");
			}
			if (coherenceSync.TryGetBindingByGuid("4a762c79-f731-4c23-991c-282fc95d1c5a", "waitingTimeRemaining", out Binding InternalGameStateHandler_GameStateComponent_2155129602599516921_GameStateHandler_GameStateComponent_2155129602599516921_waitingTimeRemaining))
			{
				var clone = new Binding_ec2ebf1be19db254da1ba90b22940b35_4a762c79_f731_4c23_991c_282fc95d1c5a();
				InternalGameStateHandler_GameStateComponent_2155129602599516921_GameStateHandler_GameStateComponent_2155129602599516921_waitingTimeRemaining.CloneTo(clone);
				coherenceSync.Bindings[coherenceSync.Bindings.IndexOf(InternalGameStateHandler_GameStateComponent_2155129602599516921_GameStateHandler_GameStateComponent_2155129602599516921_waitingTimeRemaining)] = clone;
			}
			else
			{
				logger.Error("Couldn't find binding (GameStateComponent).waitingTimeRemaining");
			}
			if (coherenceSync.TryGetBindingByGuid("4a35e0c8-150d-457e-a58e-fcd0044ff5aa", "dummyArray", out Binding InternalGameStateHandler_GameStateComponent_2155129602599516921_GameStateHandler_GameStateComponent_2155129602599516921_dummyArray))
			{
				var clone = new Binding_ec2ebf1be19db254da1ba90b22940b35_4a35e0c8_150d_457e_a58e_fcd0044ff5aa();
				InternalGameStateHandler_GameStateComponent_2155129602599516921_GameStateHandler_GameStateComponent_2155129602599516921_dummyArray.CloneTo(clone);
				coherenceSync.Bindings[coherenceSync.Bindings.IndexOf(InternalGameStateHandler_GameStateComponent_2155129602599516921_GameStateHandler_GameStateComponent_2155129602599516921_dummyArray)] = clone;
			}
			else
			{
				logger.Error("Couldn't find binding (GameStateComponent).dummyArray");
			}
			if (coherenceSync.TryGetBindingByGuid("00051df1-bad9-46f6-a698-08b9741ebbd8", "layersAsGameObject", out Binding InternalGameStateHandler_GraphGeneratorScript_2155129602599516902_GameStateHandler_GraphGeneratorScript_2155129602599516902_layersAsGameObject))
			{
				var clone = new Binding_ec2ebf1be19db254da1ba90b22940b35_00051df1_bad9_46f6_a698_08b9741ebbd8();
				InternalGameStateHandler_GraphGeneratorScript_2155129602599516902_GameStateHandler_GraphGeneratorScript_2155129602599516902_layersAsGameObject.CloneTo(clone);
				coherenceSync.Bindings[coherenceSync.Bindings.IndexOf(InternalGameStateHandler_GraphGeneratorScript_2155129602599516902_GameStateHandler_GraphGeneratorScript_2155129602599516902_layersAsGameObject)] = clone;
			}
			else
			{
				logger.Error("Couldn't find binding (GraphGeneratorScript).layersAsGameObject");
			}
		}

		public override List<ICoherenceComponentData> CreateEntity()
		{
			if (coherenceSync.UsesLODsAtRuntime && (Archetypes.IndexForName.TryGetValue(coherenceSync.Archetype.ArchetypeName, out int archetypeIndex)))
			{
				var components = new List<ICoherenceComponentData>()
				{
					new ArchetypeComponent
					{
						index = archetypeIndex
					}
				};

				return components;
			}
			else
			{
				logger.Warning($"Unable to find archetype {coherenceSync.Archetype.ArchetypeName} in dictionary. Please, bake manually (coherence > Bake)");
			}

			return null;
		}

		public override void Initialize(CoherenceSync sync, IClient client)
		{
			if (coherenceSync == null)
			{
				coherenceSync = sync;
			}
			this.client = client;
		}

		public override void ReceiveCommand(IEntityCommand command)
		{
			switch(command)
			{
				default:
					logger.Warning($"[CoherenceSyncGameStateHandler] Unhandled command: {command.GetType()}.");
					break;
			}
		}
	}
}
