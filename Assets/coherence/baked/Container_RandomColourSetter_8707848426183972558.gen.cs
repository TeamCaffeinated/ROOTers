// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
	using Coherence.ProtocolDef;
	using Coherence.Serializer;
	using Coherence.SimulationFrame;
	using Coherence.Entity;
	using Coherence.Utils;
	using Coherence.Brook;
	using Coherence.Toolkit;
	using UnityEngine;

	public struct Container_RandomColourSetter_8707848426183972558 : ICoherenceComponentData
	{
		public Color cubeColor;
		public bool colorSet;

		public override string ToString()
		{
			return $"Container_RandomColourSetter_8707848426183972558(cubeColor: {cubeColor}, colorSet: {colorSet})";
		}

		public uint GetComponentType() => Definition.InternalContainer_RandomColourSetter_8707848426183972558;

		public const int order = 0;

		public int GetComponentOrder() => order;

		public AbsoluteSimulationFrame Frame;
	

		public void SetSimulationFrame(AbsoluteSimulationFrame frame)
		{
			Frame = frame;
		}

		public AbsoluteSimulationFrame GetSimulationFrame() => Frame;

		public ICoherenceComponentData MergeWith(ICoherenceComponentData data, uint mask)
		{
			var other = (Container_RandomColourSetter_8707848426183972558)data;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				cubeColor = other.cubeColor;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				colorSet = other.colorSet;
			}
			mask >>= 1;
			return this;
		}

		public static void Serialize(Container_RandomColourSetter_8707848426183972558 data, uint mask, IOutProtocolBitStream bitStream)
		{
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteColor((data.cubeColor.ToCoreColor()), FloatMeta.ForFixedPoint(0, 1, 2.3283064370807973753052522170037E-10));
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.colorSet);
			}
			mask >>= 1;
		}

		public static (Container_RandomColourSetter_8707848426183972558, uint, uint?) Deserialize(InProtocolBitStream bitStream)
		{
			var mask = (uint)0;
			var val = new Container_RandomColourSetter_8707848426183972558();
	
			if (bitStream.ReadMask())
			{
				val.cubeColor = (bitStream.ReadColor(FloatMeta.ForFixedPoint(0, 1, 2.3283064370807973753052522170037E-10))).ToUnityColor();
				mask |= 0b00000000000000000000000000000001;
			}
			if (bitStream.ReadMask())
			{
				val.colorSet = bitStream.ReadBool();
				mask |= 0b00000000000000000000000000000010;
			}
			return (val, mask, null);
		}
		public static (Container_RandomColourSetter_8707848426183972558, uint, uint?) DeserializeArchetypeContainer_11cb97191c21e4e609b0324a7f00b18d_Container_RandomColourSetter_8707848426183972558_LOD0(InProtocolBitStream bitStream)
		{
			var mask = (uint)0;
			var val = new Container_RandomColourSetter_8707848426183972558();
			if (bitStream.ReadMask())
			{
				val.cubeColor = (bitStream.ReadColor(FloatMeta.ForFixedPoint(0, 1, 2.3283064370807973753052522170037E-10))).ToUnityColor();
				mask |= 0b00000000000000000000000000000001;
			}
			if (bitStream.ReadMask())
			{
				val.colorSet = bitStream.ReadBool();
				mask |= 0b00000000000000000000000000000010;
			}

			return (val, mask, 0);
		}

		/// <summary>
		/// Resets byte array references to the local array instance that is kept in the lastSentData.
		/// If the array content has changed but remains of same length, the new content is copied into the local array instance.
		/// If the array length has changed, the array is cloned and overwrites the local instance.
		/// If the array has not changed, the reference is reset to the local array instance.
		/// Otherwise, changes to other fields on the component might cause the local array instance reference to become permanently lost.
		/// </summary>
		public void ResetByteArrays(ICoherenceComponentData lastSent, uint mask)
		{
			var last = lastSent as Container_RandomColourSetter_8707848426183972558?;
	
		}
	}
}